import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';

const CookieConsentDialog1 = ({ onConsent }) => {
    const [isVisible, setIsVisible] = useState(true);
    const handleConsent = (choice) => {
        setIsVisible(false);
        onConsent(choice);
    };
    if (!isVisible) {
        return null;
    }
    return (React.createElement("div", { className: "overlay" },
        React.createElement("div", { className: "dialog" },
            React.createElement("p", null, "Please select your cookie consent preference:"),
            React.createElement("button", { onClick: () => handleConsent('ACCEPT_ALL') }, "Accept All"),
            React.createElement("button", { onClick: () => handleConsent('REJECT_ALL') }, "Reject All"),
            React.createElement("button", { onClick: () => handleConsent('CUSTOMIZE') }, "Customize"),
            React.createElement("button", { onClick: () => handleConsent('LEARN_MORE') }, "Learn More"))));
};

// import { useEffect, useState } from 'react';
//
// export const useCookieConsent = () => {
//     const [consent, setConsent] = useState<string[] | null>(null);
//
//     useEffect(() => {
//         // Funkce, která se zavolá, když uživatel udělá výběr
//         const handleConsentUpdate = (event: CustomEvent<string[]>) => {
//             setConsent(event.detail);
//         };
//
//         // Připojíme posluchač událostí na window
//         window.addEventListener('cookie-consent-update', handleConsentUpdate);
//
//         return () => {
//             // Odebereme posluchače při odmontování komponenty
//             window.removeEventListener('cookie-consent-update', handleConsentUpdate);
//         };
//     }, []);
//
//     return consent;
// };
// import { useEffect, useState } from 'react';
//
// export default function useCookieConsent  (){
//     const [consent, setConsent] = useState<string[] | null>(null);
//
//     useEffect(() => {
//         // Typový guard pro ověření, že událost je správného typu
//         const isConsentEvent = (event: Event): event is CustomEvent<string[]> => {
//             return event.type === 'cookie-consent-update';
//         };
//
//         // Funkce, která se zavolá, když uživatel udělá výběr
//         const handleConsentUpdate: EventListener = (event) => {
//             if (isConsentEvent(event)) {
//                 setConsent(event.detail);
//             }
//         };
//
//         // Připojíme posluchač událostí na window
//         window.addEventListener('cookie-consent-update', handleConsentUpdate);
//
//         return () => {
//             // Odebereme posluchače při odmontování komponenty
//             window.removeEventListener('cookie-consent-update', handleConsentUpdate);
//         };
//     }, []);
//
//     return consent;
// };
//
function useCookieConsent() {
    const [consent, setConsent] = useState(null);
    useEffect(() => {
        const handleConsentUpdate = (event) => {
            if (event.type === 'cookie-consent-update') {
                const detail = event.detail;
                console.log('Consent received:', detail); // Add this line
                setConsent(detail);
            }
        };
        window.addEventListener('cookie-consent-update', handleConsentUpdate);
        return () => {
            window.removeEventListener('cookie-consent-update', handleConsentUpdate);
        };
    }, []);
    return consent;
}

// Tento soubor bude obsahovat funkce pro vyvolání událostí
function emitConsentUpdate(consent) {
    console.log('emitConsentUpdate called with:', consent); // Add this line
    const event = new CustomEvent('cookie-consent-update', { detail: consent });
    window.dispatchEvent(event);
}

// Předdefinované možnosti cookies
const cookieOptions = [
    { id: 'necessary', text: 'Nezbytné cookies' },
    { id: 'analytics', text: 'Analytické cookies' },
    { id: 'marketing', text: 'Marketingové cookies' },
    { id: 'socialMedia', text: 'Cookies pro sociální média' }
];
function CookieConsentDialog({ onChoice }) {
    const [isTargetAvailable, setIsTargetAvailable] = useState(false);
    const consent = useCookieConsent(); // Just getting consent
    const [chosenOption, setChosenOption] = useState(null);
    useEffect(() => {
        const targetEl = document.body;
        if (targetEl) {
            setIsTargetAvailable(true);
        }
    }, []);
    const handleOptionClick = (option) => {
        // onChoice(option.text)
        setChosenOption(option.id);
        emitConsentUpdate([option.id]); // Emitting the event will update the consent state in the hook
    };
    if (!isTargetAvailable || consent) {
        // Don't render if the target is not available or consent has been given
        return null;
    }
    // Portal rendering logic
    return ReactDOM.createPortal(React.createElement("div", { style: {
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center'
        } },
        React.createElement("div", { style: {
                backgroundColor: '#fff',
                padding: '20px',
                borderRadius: '10px',
                boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                textAlign: 'center',
                width: '80%',
                maxWidth: '400px'
            } },
            React.createElement("h2", null, "Vyberte si jednu z variant"),
            React.createElement("div", { style: { marginTop: '20px' } }, cookieOptions.map((option) => (React.createElement("div", { key: option.id, style: {
                    backgroundColor: '#7c4dff',
                    color: '#ffffff',
                    padding: '10px 20px',
                    margin: '10px 0',
                    borderRadius: '5px',
                    cursor: 'pointer',
                    transition: 'transform 0.3s ease',
                    fontSize: '20px',
                    boxShadow: chosenOption === option.id ? '0 2px 4px rgba(0, 0, 0, 0.2)' : 'none',
                    transform: chosenOption === option.id ? 'scale(1.05)' : 'none'
                }, onClick: () => handleOptionClick(option) }, option.text)))))), document.body);
}

export { CookieConsentDialog, CookieConsentDialog1 as Dialog, emitConsentUpdate, useCookieConsent };
//# sourceMappingURL=index.js.map
