var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: !0});
var __commonJS = (callback, module2) => () => (module2 || (module2 = {exports: {}}, callback(module2.exports, module2)), module2.exports), __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: !0});
};

// index.js
var require_concat_merge = __commonJS((exports2) => {
  __export(exports2, {
    default: () => concat_merge_default
  });
  var isObject = (v) => v !== null && typeof v == "object", isPlainObject = (v) => {
    if (!isObject(v))
      return !1;
    if (!("constructor" in v))
      return !0;
    let proto = Object.getPrototypeOf(v);
    return !proto || !Object.getPrototypeOf(proto);
  }, concatMerge = (a, b) => {
    a = isObject(a) ? a : {}, b = isObject(b) ? b : {};
    let r = {}, keys = Object.keys(a).concat(Object.keys(b));
    for (let key of keys) {
      let va = a[key];
      if (key in b) {
        let vb = b[key];
        Array.isArray(va) ? r[key] = Array.isArray(vb) ? va.concat(vb) : vb : isObject(va) ? r[key] = isObject(vb) ? isPlainObject(va) ? concatMerge(va, vb) : Object.assign(va, vb) : vb : r[key] = vb;
      } else
        r[key] = va;
    }
    return r;
  }, concat_merge_default = concatMerge;
});

// cjs.js
module.exports = require_concat_merge().default;
